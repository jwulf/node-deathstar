{"ts":1351547473717,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\n// TODO: unit / integration tests for the browser\r\n\r\n(function pgControlWrapper (definition) {\r\n\r\n    // Got the cross-platform idea from here:\r\n    // http://stackoverflow.com/questions/6665779/best-practices-for-cross-commonjs-browser-development?rq=1\r\n    \r\n    // This file will function properly as a <script> tag, or a module\r\n    // using CommonJS and NodeJS or RequireJS module formats.  In\r\n    // Common/Node/RequireJS, the module exports the PressGang REST API and when\r\n    // executed as a simple <script>, it creates a PressGangCCMS global instead.\r\n\r\n    // The use of \"undefined\" in the arguments is a\r\n    // micro-optmization for compression systems, permitting\r\n    // every occurrence of the \"undefined\" variable to be\r\n    // replaced with a single-character.\r\n    \r\n    var isBrowser = false;\r\n    \r\n    if (typeof exports === \"object\") {\r\n        definition(require, exports, module, isBrowser);\r\n    // <script>\r\n    } else {\r\n        isBrowser = true;\r\n        definition(undefined, PressGangCCMS = {}, {}, isBrowser);\r\n    }\r\n\r\n})(function (serverSideRequire, exports, module, isBrowser) {\r\n    \r\n    var restget;\r\n    \r\n    if (isBrowser) {\r\n        restget = function(url, cb){\r\n            $.ajax({\r\n            url: url,\r\n            dataType: 'json',\r\n            async: false, // does not fire success in Google Chrome if true\r\n            success: cb\r\n            }); \r\n        }\r\n    } else {\r\n        var restler = require(\"restler\");\r\n        restget = function(url, cb){\r\n            restler.get(url).on('complete', cb);  \r\n        }\r\n    }\r\n    \r\n    exports.DEFAULT_URL = 'http://127.0.0.1:8080/TopicIndex';\r\n    exports.CONTENT_SPEC_TAG_ID = 268;\r\n    exports.REST_API_PATH = '/seam/resource/rest/';\r\n    exports.REST_UPDATE_TOPIC_PATH = 'topic/update/json';\r\n    exports.DEFAULT_REST_VER = 1;\r\n    exports.DEFAULT_LOG_LEVEL = 0;\r\n    exports.DEFAULT_AUTH_METHOD = '';\r\n    exports.DATA_REQ = {\r\n        xml: 'xml',\r\n        topic_tags: 'topic_tags',\r\n        json: 'json'\r\n    };\r\n    exports.ContentSpecMetadataSchema = [\r\n       {attr : 'specrevision', rule : /^SPECREVISION[ ]*((=.*)|$)/i},\r\n        {attr : 'product',      rule : /^PRODUCT[ ]*((=.*)|$)/i},\r\n        {attr : 'checksum',     rule : /^CHECKSUM[ ]*((=.*)|$)/i},\r\n        {attr : 'subtitle',     rule : /^SUBTITLE[ ]*((=.*)|$)/i},\r\n        {attr : 'title',        rule : /^TITLE[ ]*((=.*)|$)/i},\r\n        {attr : 'edition',      rule : /^EDITION[ ]*((=.*)|$)/i},\r\n        {attr : 'bookversion',  rule : /^BOOK VERSION[ ]*((=.*)|$)/i},\r\n        {attr : 'pubsnumber',   rule : /^PUBSNUMBER[ ]*((=.*)|$)/i},\r\n        {attr : 'description',  rule : /^(DESCRIPTION|ABSTRACT)[ ]*((=.*)|$)/i},\r\n        {attr : 'copyright',    rule : /^COPYRIGHT HOLDER[ ]*((=.*)|$)/i},\r\n        {attr : 'debug',        rule : /^DEBUG[ ]*((=.*)|$)/i},\r\n        {attr : 'version',      rule : /^VERSION[ ]*((=.*)|$)/i},\r\n        {attr : 'brand',        rule : /^BRAND[ ]*((=.*)|$)/i},\r\n        {attr : 'buglinks',     rule : /^BUG[ ]*LINKS[ ]*((=.*)|$)/i},\r\n        {attr : 'bzproduct',    rule : /^BZPRODUCT[ ]*((=.*)|$)/i},\r\n        {attr : 'bzcomponent',  rule : /^BZCOMPONENT[ ]*((=.*)|$)/i},\r\n        {attr : 'bzversion',    rule : /^BZVERSION[ ]*((=.*)|$)/i},\r\n        {attr : 'surveylinks',  rule : /^SURVEY[ ]*LINKS[ ]*((=.*)|$)/i},\r\n        {attr : 'translocale',  rule : /^TRANSLATION LOCALE[ ]*((=.*)|$)/i},\r\n        {attr : 'type',         rule : /^TYPE[ ]*((=.*)|$)/i},\r\n        {attr : 'outputstyle',  rule : /^OUTPUT STYLE[ ]*((=.*)|$)/i},\r\n        {attr : 'publican.cfg', rule : /^PUBLICAN\\\\.CFG[ ]*((=.*)|$)/i},\r\n        {attr : 'inlineinject', rule : /^INLINE INJECTION[ ]*((=.*)|$)/i},\r\n        {attr : 'space',        rule : /^spaces[ ]*((=.*)|$)/i},\r\n        {attr : 'dtd',          rule : /^DTD[ ]*((=.*)|$)/i},\r\n        {attr : 'id',           rule : /^ID[ ]*((=.*)|$)/i},\r\n    //  {attr: 'bookdir',       rule : injected}     \r\n    //  {attr: 'serverurl',     rule : injected}\r\n    ];\r\n    \r\n    var PressGangClass = (function () {\r\n        function PressGangCCMS(settings) {\r\n            this.setSelf();\r\n            this.url = exports.DEFAULT_URL;\r\n            if('string' == typeof settings) {\r\n                this.url = settings;\r\n            }\r\n            if('object' == typeof settings && settings.url) {\r\n                this.url = settings.url;\r\n            }\r\n            this.restver = exports.DEFAULT_REST_VER;\r\n            this.loglevel = exports.DEFAULT_LOG_LEVEL;\r\n            if('object' == typeof settings) {\r\n                for(var i in settings) {\r\n                    this[i] = settings[i];\r\n                }\r\n            }\r\n        }\r\n        PressGangCCMS.prototype.setSelf = function () {\r\n            this.self = this;\r\n        };\r\n        PressGangCCMS.prototype.supportedDataRequests = function () {\r\n            return exports.DATA_REQ;\r\n        };\r\n        PressGangCCMS.prototype.log = function (msg, msglevel) {\r\n            if(this.loglevel > msglevel) {\r\n                console.log(msg);\r\n            }\r\n        };\r\n        PressGangCCMS.prototype.isContentSpec = function (topic_id, cb) {\r\n            var _is_spec;\r\n            _is_spec = false;\r\n            if(typeof cb !== 'function') {\r\n                return;\r\n            }\r\n            if(typeof topic_id !== 'number') {\r\n                return cb('Need numeric Topic ID as first argument', false);\r\n            }\r\n            this.getTopicData('topic_tags', topic_id, function (err, result) {\r\n                if(err) {\r\n                    return cb(err, null);\r\n                }\r\n                if(result && result.length > 0) {\r\n                    for(var i = 0; i < result.length; i++) {\r\n                        if(result[i].item.id && result[i].item.id === exports.CONTENT_SPEC_TAG_ID) {\r\n                            _is_spec = true;\r\n                        }\r\n                    }\r\n                }\r\n                return cb(err, _is_spec);\r\n            });\r\n        };\r\n        PressGangCCMS.prototype.getTopicXML = function (topic_id, rev, cb) {\r\n            this.getTopicData('xml', topic_id, rev, cb);\r\n        };\r\n        PressGangCCMS.prototype.getTopicData = function (data_request, topic_id, revORcb, cb) {\r\n            var _this;\r\n            var _rev;\r\n            var _result;\r\n    \r\n            if('function' == typeof cb) {\r\n                if('number' !== typeof revORcb) {\r\n                    if(cb) {\r\n                        return cb('Need numerical topic revision as third argument', null);\r\n                    }\r\n                }\r\n            }\r\n            if('function' == typeof revORcb) {\r\n                cb = revORcb;\r\n            }\r\n            if(!cb) {\r\n                return;\r\n            }\r\n            if(!exports.DATA_REQ[data_request]) {\r\n                return cb('Unsupported operation ' + data_request + ' passed as first argument', null);\r\n            }\r\n            if('number' !== typeof topic_id) {\r\n                return cb('Need numerical Topic ID as second argument', null);\r\n            }\r\n            if('undefined' == typeof this.url || 'null' == typeof this.url || '' === this.url) {\r\n                return cb('No server URL specified', null);\r\n            }\r\n            if(('number' == typeof revORcb) && (-1 !== revORcb)) {\r\n                _rev = revORcb;\r\n            }\r\n            _this = this;\r\n            this.getBaseRESTPath(function getBaseRESTPathCallback (requestPath) {\r\n                switch(data_request) {\r\n                    case exports.DATA_REQ.xml:\r\n                    case exports.DATA_REQ.json: {\r\n                        requestPath += '/topic/get/json/' + topic_id;\r\n                        if(_rev) {\r\n                            requestPath += '/r/' + _rev;\r\n                        }\r\n                        break;\r\n    \r\n                    }\r\n                    case exports.DATA_REQ.topic_tags: {\r\n                        requestPath += '/topic/get/json/' + topic_id;\r\n                        if(_rev) {\r\n                            requestPath += '/r/' + _rev;\r\n                        }\r\n                        requestPath += '?expand=';\r\n                        requestPath += encodeURIComponent('{\"branches\":[{\"trunk\":{\"name\":\"tags\"}}]}');\r\n                        break;\r\n    \r\n                    }\r\n                }\r\n                _this.log(_this.url + requestPath, 2);\r\n                restget(_this.url + requestPath, function restgetCallback (result) {\r\n                    if(result instanceof Error) {\r\n                        return cb('REST err: ' + result, null);\r\n                    }\r\n                    if(!result) {\r\n                        return cb('Could not get data from server', null);\r\n                    }\r\n                    _result = result;\r\n                    switch(data_request) {\r\n                        case exports.DATA_REQ.topic_tags: {\r\n                            if(!result.tags) {\r\n                                _result = [];\r\n                            } else {\r\n                                _result = result.tags.items;\r\n                            }\r\n                            break;\r\n    \r\n                        }\r\n                        case exports.DATA_REQ.xml: {\r\n                            _result = result.xml;\r\n                            break;\r\n    \r\n                        }\r\n                    }\r\n                    if(cb) {\r\n                        return cb(null, _result);\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        PressGangCCMS.prototype.getSpec = function (spec_id, revORcb, cb) {\r\n            var _this = this;\r\n            var _rev;\r\n            _rev = -1;\r\n            if('function' == typeof revORcb) {\r\n                cb = revORcb;\r\n            }\r\n            if('number' == typeof revORcb) {\r\n                _rev = revORcb;\r\n            }\r\n            if('function' !== typeof cb) {\r\n                return;\r\n            }\r\n            if('number' !== typeof spec_id) {\r\n                cb('Numeric Spec ID needed as first argument', null);\r\n            }\r\n            this.isContentSpec(spec_id, function (err, is) {\r\n                if(err) {\r\n                    return cb(err, null);\r\n                }\r\n                if(!is) {\r\n                    return cb('Requested ID is not a Content Specification', null);\r\n                }\r\n                _this.getTopicData(exports.DATA_REQ.xml, spec_id, _rev, function (err, result) {\r\n                    if(err) {\r\n                        return cb(err, result);\r\n                    }\r\n                    _this.stripMetadata(result, function getSpecRevStripMetadataCall(err, result) {\r\n                        return cb(err, result);\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        PressGangCCMS.prototype.stripMetadata = function (spec, cb) {\r\n            var err;\r\n            var _result;\r\n            var array;\r\n            if('function' !== typeof cb) {\r\n                return;\r\n            }\r\n            if('string' !== typeof spec || '' === spec) {\r\n                return cb('Cannot parse spec - expected string value', null);\r\n            }\r\n            _result = {\r\n            };\r\n            _result.spec = spec;\r\n            _result.metadata = {\r\n                'serverurl': this.url\r\n            };\r\n            array = spec.split(\"\\n\");\r\n            for(var i = 0; i < array.length; i++) {\r\n                for(var j = 0; j < exports.ContentSpecMetadataSchema.length; j++) {\r\n                    if(array[i].match(exports.ContentSpecMetadataSchema[j].rule)) {\r\n                        _result.metadata[exports.ContentSpecMetadataSchema[j].attr] = array[i].split('=')[1].replace(/^\\s+|\\s+$/g, '');\r\n                    }\r\n                }\r\n            }\r\n            cb(err, _result);\r\n        };\r\n        PressGangCCMS.prototype.getBaseRESTPath = function (cb) {\r\n            var requestPath;\r\n            var _restver;\r\n    \r\n            requestPath = exports.REST_API_PATH;\r\n            _restver = this.restver || exports.DEFAULT_REST_VER;\r\n            requestPath += _restver;\r\n            return cb(requestPath);\r\n        };\r\n        PressGangCCMS.prototype.saveTopic = function (topic, log_msg, change_impact, cb) {\r\n            var CHANGE = {\r\n                MINOR: 1,\r\n                MAJOR: 2\r\n            };\r\n            this.getBaseRESTPath(function (requestPath) {\r\n                requestPath += exports.REST_UPDATE_TOPIC_PATH;\r\n                requestPath += '?message=';\r\n                requestPath += encodeURIComponent(log_msg);\r\n                requestPath += '&flag=';\r\n                requestPath += '' + change_impact;\r\n            });\r\n        };\r\n        return PressGangCCMS;\r\n    })();\r\n    exports.PressGangCCMS = PressGangClass;\r\n});\r\n\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":12821}]],"length":12821}
{"contributors":[],"silentsave":false,"ts":1351547520796,"patch":[[{"diffs":[[0,"                "],[-1,"return "],[0,"cb(err, _is_spec"]],"start1":5917,"start2":5917,"length1":39,"length2":32},{"diffs":[[0,"_is_spec);\r\n"],[1,"                return _is_spec;\r\n"],[0,"            "]],"start1":5941,"start2":5941,"length1":24,"length2":58}]],"length":12848,"saved":false}
{"ts":1351547600907,"patch":[[{"diffs":[[0,"r _result;\r\n"],[1,"            var errmsg;\r\n"],[0,"    \r\n      "]],"start1":6322,"start2":6322,"length1":24,"length2":49},{"diffs":[[0,"        "],[-1,"return cb("],[1,"errmsg = "],[0,"'Unsuppo"]],"start1":6855,"start2":6855,"length1":26,"length2":25},{"diffs":[[0," first argument'"],[-1,", null)"],[1,"\r\n                return cb(errmsg, null);\r\n                return {error: errmsg}"],[0,";\r\n            }"]],"start1":6925,"start2":6925,"length1":39,"length2":114}]],"length":12947,"saved":false}
{"ts":1351547785010,"patch":[[{"diffs":[[0,"                "],[-1,"return "],[0,"cb(err, null);\r\n"]],"start1":5529,"start2":5529,"length1":39,"length2":32},{"diffs":[[0,"cb(err, null);\r\n"],[1,"                    return {error: err}\r\n"],[0,"                "]],"start1":5545,"start2":5545,"length1":32,"length2":73},{"diffs":[[0,"            "],[-1,"return "],[0,"cb(errmsg, n"]],"start1":6981,"start2":6981,"length1":31,"length2":24},{"diffs":[[0,"            "],[-1,"return cb("],[1,"errmsg = "],[0,"'Need numeri"]],"start1":7120,"start2":7120,"length1":34,"length2":33},{"diffs":[[0,"second argument'"],[-1,", null)"],[1,";\r\n                cb(errmsg, null);\r\n                return {error: errmsg}"],[0,";\r\n            }"]],"start1":7169,"start2":7169,"length1":39,"length2":108}]],"length":13042,"saved":false}
{"ts":1351547828412,"patch":[[{"diffs":[[0,"            "],[-1,"return cb("],[1,"errmsg = "],[0,"'Need numeri"]],"start1":5329,"start2":5329,"length1":34,"length2":33},{"diffs":[[0,"ent'"],[-1,", false)"],[1,";\r\n                cb(errmsg, false);\r\n                return {error: errmsg}"],[0,";\r\n "]],"start1":5387,"start2":5387,"length1":16,"length2":85}]],"length":13110,"saved":false}
