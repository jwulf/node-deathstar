Live Update Editing

Add support for content spec push events:

0. Store the content spec that is used to build a book in its metadata (we already get it in getFixedRevisions)
1. On push, read the content spec before it is pushed to the server.
2. On successful complete, grab the new spec.
3. Three-way diff:
  (a) Compare the 0-spec to the 2-spec for structural changes. Reorganise the existing topics to fit.
  (b) Compare the 1-spec to the 2-spec for new topics. Get the new topic number from the 2-spec and create placeholders for immediate editing.

For bonus points - how does this work offline?



## Phase One

The editor is currently spawned from the built book page. Since it is a child, it can communicate back to the parent window.

When the topic is saved in the editor, the editor should communicate back to the parent window with the updated preview HTML of the topic.

The parent window should then insert the preview HTML in the correct place in the DOM, preserving any "Prerequistes" and "See Also" link sections. The parent window should persist the DOM to disk, effectively replacing the built book with an updated one.

Challenges for this include: 

1. Getting the section numbering right. Preview HTML also numbers the section as "1". The parent window will need to work out the correct section number, and amend the incoming HTML preview to reflect the correct section numbering.

Upate: 04 April 2013

Phase One is now partially implemented.

As a topic is edited in the Death Star editor, an HTML preview is periodically built on the Death Star server and sent back to the editor via AJAX.

When "Save" is pressed in the editor, the Topic XML is sent to the PressGang server.

On a successful save result from the PressGang server, the editor calls the "updateTopic" method of its parent window. 
The parent window of the editor is the built book. The updateTopic method is in the publican-deathstar brand. 
The editor passes the Topic ID and the built HTML preview from the Death Star server.
When updateTopic is called, the book inserts the HTML preview to the correct section, preserving the Prereqs, See Also links, and also the Topic title with its section numbering and TOC anchor.
The final step in updateTopic is an AJAX call to the Death Star server's REST API from the book, passing back the entire HTML of the book from the browser.

The Death Star server then rewrites the built book on disk with the updated HTML from the browser. 

Fixed revisions are not handled yet, as it relies on the PressGang RFE. This means that at the moment a fixed revision topic in a content spec can be edited in the Death Star editor, and will update in the built book - which is not an accurate reflection of the book.

## Phase Two

A book open in a browser should reflect live edits that were made by an instance of the book in another browser window or on another machine.

Immediately when a book is succesfully built, it is scanned on the server using the same technique the Edit link injector uses. An array of the topics in it is created, indexed on the pathURL. 

topics: {
    'http:skynet.something.com:8080/TopicIndex/': {
        6543: {'builds/6453-Whatever': true, 'builds/345-Something_Else': true}
        ...
    }
}

function afterBuildTopicDependencyScanner () {
    $each('.BugRolePara') {
        // get topicID
        if (! topics.skynetURL)
            topics.skynetURL = {};
        if (! topics.skynetURL['topic-' + topicID]) 
            topics['topic-' + topicID] = {};
    
        topics['topic-' + topicID][pathURL] = true 
    }            
}

The book brand opens a web socket with the Death Star server, and passes in its pathURL. This pathURL is used as an index to an array of streams. The stream is connected to the websocket. 

patchStreams: {
    'http:skynet.something.com:8080/TopicIndex/': {
        6453: <stream>,
        3454: <stream>
    }
}

(The patch stream is created whenever the jsondb.Books is initialised, and is checked whenever a book is built, to make sure that one exists for that build).

socketHandler.js:
client.on('patchSubscribe', function(data) { 
    if (data.pathURL && patchStreams[data.pathURL]) {
        var myPatchStream = new Stream();
        myPatchStream.readable = myPatchStream.writable = true;
        myPatchStream.on('data', function (data){
            client.emit('cmdoutput', data); 
        });
        myPatchStream.pipe(patchStreams[data.pathURL]);
    }
}

When a topic is edited and saved, the editor calls the server patch method with the skynetURL, topicID, and new HTML.

On the server, the topicID and skynetURL is used to retrieve the list of pathURLs relying on that topic.

buildsThatUseThisPatch = topics[skynetURL]['topic-' + topicID];
for (build in buildsThatUseThisPatch)
    patchBook(build, topicID, html);

function patchBook (build, topicID, html) {
    // Patch the book
    patchStreams.build.write({topicID: topicID, html: myPatchedHtml});
}


Each pathURL book is patched on the server, preserving the appropriate section header and relationship links, then sent into the stream for that book. The websocket listening to that stream then emits a 'patch' event with the appropriate replacement HTML.

the pathURL parameter is used to get the stream from the array, and send a reload event.

When the book gets a reload event, it saves its current scroll location (or perhaps the element in view at the top of page - re-examine the code tabs default changing code to see how that anchors the view), then reloads its HTML via AJAX. 

Care should be taken to avoid reloading the book when it is itself the persister. Perhaps call to persist should take a UUID as a parameter to allow books to identify whether they caused the reload broadcast.

## Phase Three

2. Fixed revision topics should not be updated.

To deal with two, an RFE should be raised (or bumped) for the CSProcessor to write the topic revision into the <section> element of the topic as a role attribute, for example:
<section role="pgccms-rev-XYZ">  

This will make it available in the built HTML.

Update: PressGang RFE here: https://bugzilla.redhat.com/show_bug.cgi?id=861351

## Phase Four

The book should listen to remote content spec push events on the server. When a push is detected, the book should lock itself and begin rebuilding. 

Locking is necessary to prevent local changes to the book not being accounted for (because they were committed after the rebuild finished, but before the new HTML was presented to the user).

## Phase Five

The book should listen to the PressGang CCMS server for events that relate to topics in the book. When a topic in the book is saved on the server, the book should retrieve the topic XML and amend the built book. 

Note that this will only affect local Death Star instances. If everyone editing a book is using a hosted instance (ie: the same Death Star server), then all their changes will be reflected in the book they are all viewing.

Challenges for this include: 

1. Distinguishing between a local change and a remote change. The idea with this function is implement live edit updates on remote machines. This function will need to know when an edit is being handled by the local editor as per the functionality in phase one, and when an edit has been performed remotely.
